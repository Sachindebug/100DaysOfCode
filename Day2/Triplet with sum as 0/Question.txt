You are given an array Arr consisting of n integers, you need to find all the distinct triplets present in the array which adds up to zero.
An array is said to have a triplet {arr[i], arr[j], arr[k]} with 0 sum if there exists three indices i, j and k such that i!=j, j!=k and i!=k and arr[i] + arr[j] + arr[k] = 0.
Note:
1. You can return the list of values in any order. For example, if a valid triplet is {1, 2, -3}, then (2, -3, 1), (-3, 2, 1) etc is also valid triplet. Also, the ordering of different triplets can be random i.e if there are more than one valid triplets, you can return them in any order.
2. The elements in the array need not be distinct.
3. If no such triplet is present in the array, then return an empty list, and the output printed for such a test case will be "-1".
Input Format:
The first line of the input contains an integer T, denoting the number of test cases.
The first line of each test case contains the integer N, denoting the size of the array.
The second line of each test case contains N space-separated integers denoting the array elements.
Output Format:
For each test case, every line of output contains three spaced integers which correspond to the elements which add to zero. Refer to sample input 2 for more clarification.
Note :
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <=  50
1 <= N <= 10^3  
-10^5 <= Arr[i] <= 10^5
Time Limit: 1 sec
Sample Input 1:
 1
 5
-10 5 5 -5 2
Sample Output 1:
-10 5 5
Explanation For Sample Input 1:
-10 5 5 is the only triplet that adds up to zero. Note that the order of output does not matter, so 5 -10 5 or 5 5 -10 are also acceptable.
Sample Input 2:
3
6
1 2 3 -1 -2 -3
4
1 2 3 4 
6
-1 -1 2 2 -1 -1
Sample Output 2:
1 2 -3
-1 -2 3
-1
-1 -1 2
Explanation For Sample Input 2:
For the first input (1, 2, -3) and (-1, -2, 3) are the only triplets that add to zero.
In second input, since there are no such triplets, we print -1.
For the third input, the only distinct triplet is (-1, -1, 2), so just print -1 -1 2.
